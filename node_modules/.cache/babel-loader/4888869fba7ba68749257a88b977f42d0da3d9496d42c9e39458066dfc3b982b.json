{"ast":null,"code":"// Action Types\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Action Creators\nexport const loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: user\n});\nexport const logout = () => ({\n  type: LOGOUT\n});\n\n// Thunk for simulated login\nexport const login = credentials => dispatch => {\n  // Simulated authentication - in a real app this would call an API\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simple validation - in a real app this would be much more secure\n      if (credentials.username && credentials.password) {\n        const user = {\n          username: credentials.username,\n          // Never store actual passwords, this is just for simulation\n          name: `User ${credentials.username}`\n        };\n\n        // Save to localStorage for persistence\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch(loginSuccess(user));\n        resolve({\n          success: true\n        });\n      } else {\n        resolve({\n          success: false,\n          error: 'Invalid credentials'\n        });\n      }\n    }, 500); // Simulate API delay\n  });\n};\n\n// Thunk for logout\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('isAuthenticated');\n  localStorage.removeItem('user');\n  dispatch(logout());\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGOUT","loginSuccess","user","type","payload","logout","login","credentials","dispatch","Promise","resolve","setTimeout","username","password","name","localStorage","setItem","JSON","stringify","success","error","logoutUser","removeItem"],"sources":["/home/lelouch/to_do_app/advanced-todo-app/src/redux/actions/authActions.js"],"sourcesContent":["// Action Types\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Action Creators\nexport const loginSuccess = (user) => ({\n  type: LOGIN_SUCCESS,\n  payload: user\n});\n\nexport const logout = () => ({\n  type: LOGOUT\n});\n\n// Thunk for simulated login\nexport const login = (credentials) => (dispatch) => {\n  // Simulated authentication - in a real app this would call an API\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Simple validation - in a real app this would be much more secure\n      if (credentials.username && credentials.password) {\n        const user = {\n          username: credentials.username,\n          // Never store actual passwords, this is just for simulation\n          name: `User ${credentials.username}`\n        };\n        \n        // Save to localStorage for persistence\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        dispatch(loginSuccess(user));\n        resolve({ success: true });\n      } else {\n        resolve({ success: false, error: 'Invalid credentials' });\n      }\n    }, 500); // Simulate API delay\n  });\n};\n\n// Thunk for logout\nexport const logoutUser = () => (dispatch) => {\n  localStorage.removeItem('isAuthenticated');\n  localStorage.removeItem('user');\n  dispatch(logout());\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,MAAM,GAAG,QAAQ;;AAE9B;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAI,KAAM;EACrCC,IAAI,EAAEJ,aAAa;EACnBK,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,MAAM,GAAGA,CAAA,MAAO;EAC3BF,IAAI,EAAEH;AACR,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,KAAK,GAAIC,WAAW,IAAMC,QAAQ,IAAK;EAClD;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf;MACA,IAAIJ,WAAW,CAACK,QAAQ,IAAIL,WAAW,CAACM,QAAQ,EAAE;QAChD,MAAMX,IAAI,GAAG;UACXU,QAAQ,EAAEL,WAAW,CAACK,QAAQ;UAC9B;UACAE,IAAI,EAAE,QAAQP,WAAW,CAACK,QAAQ;QACpC,CAAC;;QAED;QACAG,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;QAC/CD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC,CAAC;QAElDM,QAAQ,CAACP,YAAY,CAACC,IAAI,CAAC,CAAC;QAC5BQ,OAAO,CAAC;UAAES,OAAO,EAAE;QAAK,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLT,OAAO,CAAC;UAAES,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAsB,CAAC,CAAC;MAC3D;IACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAOb,QAAQ,IAAK;EAC5CO,YAAY,CAACO,UAAU,CAAC,iBAAiB,CAAC;EAC1CP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EAC/Bd,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}