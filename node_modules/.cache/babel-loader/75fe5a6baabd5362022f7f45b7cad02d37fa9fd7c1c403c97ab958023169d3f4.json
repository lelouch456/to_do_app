{"ast":null,"code":"import { ADD_TASK, DELETE_TASK, UPDATE_TASK_PRIORITY } from '../actions/taskActions';\nconst localStorageMiddleware = store => next => action => {\n  // Process the action first\n  const result = next(action);\n\n  // After state changes, update localStorage for certain actions\n  switch (action.type) {\n    case ADD_TASK:\n    case DELETE_TASK:\n    case UPDATE_TASK_PRIORITY:\n      const {\n        tasks\n      } = store.getState().tasks;\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      break;\n    default:\n      break;\n  }\n  return result;\n};\nexport default localStorageMiddleware;","map":{"version":3,"names":["ADD_TASK","DELETE_TASK","UPDATE_TASK_PRIORITY","localStorageMiddleware","store","next","action","result","type","tasks","getState","localStorage","setItem","JSON","stringify"],"sources":["/home/lelouch/to_do_app/advanced-todo-app/src/redux/middlewares/localStorageMiddleware.js"],"sourcesContent":["import { ADD_TASK, DELETE_TASK, UPDATE_TASK_PRIORITY } from '../actions/taskActions';\n\nconst localStorageMiddleware = store => next => action => {\n  // Process the action first\n  const result = next(action);\n  \n  // After state changes, update localStorage for certain actions\n  switch (action.type) {\n    case ADD_TASK:\n    case DELETE_TASK:\n    case UPDATE_TASK_PRIORITY:\n      const { tasks } = store.getState().tasks;\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      break;\n    default:\n      break;\n  }\n  \n  return result;\n};\n\nexport default localStorageMiddleware;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,oBAAoB,QAAQ,wBAAwB;AAEpF,MAAMC,sBAAsB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EACxD;EACA,MAAMC,MAAM,GAAGF,IAAI,CAACC,MAAM,CAAC;;EAE3B;EACA,QAAQA,MAAM,CAACE,IAAI;IACjB,KAAKR,QAAQ;IACb,KAAKC,WAAW;IAChB,KAAKC,oBAAoB;MACvB,MAAM;QAAEO;MAAM,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAACD,KAAK;MACxCE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;MACpD;IACF;MACE;EACJ;EAEA,OAAOF,MAAM;AACf,CAAC;AAED,eAAeJ,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}