{"ast":null,"code":"// Action Types\nexport const LOGIN_SUCCESS='LOGIN_SUCCESS';export const LOGOUT='LOGOUT';// Action Creators\nexport const loginSuccess=user=>({type:LOGIN_SUCCESS,payload:user});export const logout=()=>({type:LOGOUT});// Thunk for simulated login\nexport const login=credentials=>dispatch=>{// Simulated authentication - in a real app this would call an API\nreturn new Promise(resolve=>{setTimeout(()=>{// Simple validation - in a real app this would be much more secure\nif(credentials.username&&credentials.password){const user={username:credentials.username,// Never store actual passwords, this is just for simulation\nname:`User ${credentials.username}`};// Save to localStorage for persistence\nlocalStorage.setItem('isAuthenticated','true');localStorage.setItem('user',JSON.stringify(user));dispatch(loginSuccess(user));resolve({success:true});}else{resolve({success:false,error:'Invalid credentials'});}},500);// Simulate API delay\n});};// Thunk for logout\nexport const logoutUser=()=>dispatch=>{localStorage.removeItem('isAuthenticated');localStorage.removeItem('user');dispatch(logout());};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGOUT","loginSuccess","user","type","payload","logout","login","credentials","dispatch","Promise","resolve","setTimeout","username","password","name","localStorage","setItem","JSON","stringify","success","error","logoutUser","removeItem"],"sources":["/home/lelouch/to_do_app/advanced-todo-app/src/redux/actions/authActions.js"],"sourcesContent":["// Action Types\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGOUT = 'LOGOUT';\n\n// Action Creators\nexport const loginSuccess = (user) => ({\n  type: LOGIN_SUCCESS,\n  payload: user\n});\n\nexport const logout = () => ({\n  type: LOGOUT\n});\n\n// Thunk for simulated login\nexport const login = (credentials) => (dispatch) => {\n  // Simulated authentication - in a real app this would call an API\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Simple validation - in a real app this would be much more secure\n      if (credentials.username && credentials.password) {\n        const user = {\n          username: credentials.username,\n          // Never store actual passwords, this is just for simulation\n          name: `User ${credentials.username}`\n        };\n        \n        // Save to localStorage for persistence\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        dispatch(loginSuccess(user));\n        resolve({ success: true });\n      } else {\n        resolve({ success: false, error: 'Invalid credentials' });\n      }\n    }, 500); // Simulate API delay\n  });\n};\n\n// Thunk for logout\nexport const logoutUser = () => (dispatch) => {\n  localStorage.removeItem('isAuthenticated');\n  localStorage.removeItem('user');\n  dispatch(logout());\n};\n"],"mappings":"AAAA;AACA,MAAO,MAAM,CAAAA,aAAa,CAAG,eAAe,CAC5C,MAAO,MAAM,CAAAC,MAAM,CAAG,QAAQ,CAE9B;AACA,MAAO,MAAM,CAAAC,YAAY,CAAIC,IAAI,GAAM,CACrCC,IAAI,CAAEJ,aAAa,CACnBK,OAAO,CAAEF,IACX,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAG,MAAM,CAAGA,CAAA,IAAO,CAC3BF,IAAI,CAAEH,MACR,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAM,KAAK,CAAIC,WAAW,EAAMC,QAAQ,EAAK,CAClD;AACA,MAAO,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAAK,CAC9BC,UAAU,CAAC,IAAM,CACf;AACA,GAAIJ,WAAW,CAACK,QAAQ,EAAIL,WAAW,CAACM,QAAQ,CAAE,CAChD,KAAM,CAAAX,IAAI,CAAG,CACXU,QAAQ,CAAEL,WAAW,CAACK,QAAQ,CAC9B;AACAE,IAAI,CAAE,QAAQP,WAAW,CAACK,QAAQ,EACpC,CAAC,CAED;AACAG,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAE,MAAM,CAAC,CAC/CD,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC,CAAC,CAElDM,QAAQ,CAACP,YAAY,CAACC,IAAI,CAAC,CAAC,CAC5BQ,OAAO,CAAC,CAAES,OAAO,CAAE,IAAK,CAAC,CAAC,CAC5B,CAAC,IAAM,CACLT,OAAO,CAAC,CAAES,OAAO,CAAE,KAAK,CAAEC,KAAK,CAAE,qBAAsB,CAAC,CAAC,CAC3D,CACF,CAAC,CAAE,GAAG,CAAC,CAAE;AACX,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAOb,QAAQ,EAAK,CAC5CO,YAAY,CAACO,UAAU,CAAC,iBAAiB,CAAC,CAC1CP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAC/Bd,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}